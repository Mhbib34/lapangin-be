// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())
  username String @db.VarChar(100)
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255) 
  verifyOtp Int?
  verifyOtpExpireAt DateTime?
  isAccountVerified Boolean @default(false)
  resetOtp Int?
  resetOtpExpireAt DateTime?
  role Role @default(USER)
  createdAt DateTime   @default(now())
  bookings  Booking[]

  @@map("users")
}

model Field {
  id          String     @id @default(uuid())
  name        String
  location    String
  description String?
  image       String?
  pricePerHour Int
  bookings    Booking[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String

  @@map("fields")
}

model Booking {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  field      Field          @relation(fields: [fieldId], references: [id])
  fieldId    String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus  @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  

  @@map("bookings")
}

model Category {
  id     String   @id @default(uuid())
  name   String   @unique
  fields Field[]

  @@map("categorys")
}

enum Role {
  ADMIN
  USER
}
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}